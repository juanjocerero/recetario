// Ruta: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Actualizado: Variable de entorno para PostgreSQL
  // Ejemplo: postgresql://username:password@localhost:5432/database_name
  url      = env("DATABASE_URL")
}

model Product {
  id                String             @id // Código de barras
  name              String
  normalizedName    String // Para búsqueda case/accent-insensitive
  isNameManuallySet Boolean            @default(false)
  brand             String?
  imageUrl          String?
  calories          Float?             // Valor por 100g
  fat               Float?             // Valor por 100g
  protein           Float?             // Valor por 100g
  carbs             Float?             // Valor por 100g
  fullPayload       Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  recipeIngredients RecipeIngredient[]

  @@index([normalizedName])
}

model CustomIngredient {
  id                String             @id @default(cuid())
  name              String             @unique
  normalizedName    String // Para búsqueda case/accent-insensitive
  calories          Float
  fat               Float
  protein           Float
  carbs             Float
  recipeIngredients RecipeIngredient[]

  @@index([normalizedName])
}

model Recipe {
  id              String             @id @default(cuid())
  title           String
  slug            String             @unique
  normalizedTitle String // Para búsqueda case/accent-insensitive
  steps           Json
  imageUrl        String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  ingredients     RecipeIngredient[]
  urls            RecipeUrl[]

  @@index([normalizedTitle])
  @@index([slug])
}

model RecipeUrl {
  id       String @id @default(cuid())
  url      String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  @@unique([recipeId, url])
  @@index([recipeId])
}

model RecipeIngredient {
  id                 String            @id @default(cuid())
  recipe             Recipe            @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId           String
  product            Product?          @relation(fields: [productId], references: [id])
  productId          String?
  customIngredient   CustomIngredient? @relation(fields: [customIngredientId], references: [id])
  customIngredientId String?
  quantity           Float             // En gramos

  @@index([recipeId])
  @@index([productId])
  @@index([customIngredientId])
}