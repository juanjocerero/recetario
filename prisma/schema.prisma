// Ruta: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // Justificación: Se usa una variable de entorno para la URL de la base de datos.
  // Esto permite que los tests apunten a una base de datos separada (`test.db`)
  // sin afectar a la de desarrollo (`dev.db`), aislando los entornos.
  url      = env("DATABASE_URL")
}

model Product {
  id                String             @id // Código de barras
  name              String
  normalizedName    String // Para búsqueda case/accent-insensitive
  isNameManuallySet Boolean            @default(false)
  brand             String?
  imageUrl          String?
  calories          Float?             // Valor por 100g
  fat               Float?             // Valor por 100g
  protein           Float?             // Valor por 100g
  carbs             Float?             // Valor por 100g
  fullPayload       Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  recipeIngredients RecipeIngredient[]
}

model CustomIngredient {
  id                String             @id @default(cuid())
  name              String             @unique
  normalizedName    String // Para búsqueda case/accent-insensitive
  calories          Float
  fat               Float
  protein           Float
  carbs             Float
  recipeIngredients RecipeIngredient[]
}

model Recipe {
  id              String             @id @default(cuid())
  title           String
  slug            String             @unique
  normalizedTitle String // Para búsqueda case/accent-insensitive
  steps           Json
  // Justificación (Paso 1.1): Campo para almacenar la URL de la imagen de la receta.
  // Es opcional para permitir recetas sin imagen o para usar la imagen de una URL de referencia.
  imageUrl    String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  ingredients RecipeIngredient[]
  // Justificación (Paso 1.1): Relación uno-a-muchos para almacenar las URLs de referencia de la receta.
  urls        RecipeUrl[]
}

// Justificación (Paso 1.1): Nuevo modelo para almacenar las URLs de referencia asociadas a una receta.
// Esto sigue las buenas prácticas de normalización de bases de datos.
model RecipeUrl {
  id       String @id @default(cuid())
  url      String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  @@unique([recipeId, url])
}

model RecipeIngredient {
  id                 String            @id @default(cuid())
  recipe             Recipe            @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId           String
  // Se relaciona directamente con un Product o un CustomIngredient
  product            Product?          @relation(fields: [productId], references: [id])
  productId          String?
  customIngredient   CustomIngredient? @relation(fields: [customIngredientId], references: [id])
  customIngredientId String?
  quantity           Float             // En gramos
}