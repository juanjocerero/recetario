// Ruta: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Actualizado: Variable de entorno para PostgreSQL
  // Ejemplo: postgresql://username:password@localhost:5432/database_name
  url      = env("DATABASE_URL")
}

model Product {
  id                String             @id @default(cuid())
  barcode           String?            @unique // Código de barras de OFF
  name              String
  normalizedName    String // Para búsqueda case/accent-insensitive
  imageUrl          String?
  calories          Float              // Valor por 100g
  fat               Float              // Valor por 100g
  protein           Float              // Valor por 100g
  carbs             Float              // Valor por 100g
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  recipeIngredients RecipeIngredient[]
  diaryEntries      DiaryEntry[]

  @@index([normalizedName])
}

model Recipe {
  id              String             @id @default(cuid())
  title           String
  slug            String             @unique
  normalizedTitle String // Para búsqueda case/accent-insensitive
  steps           Json
  imageUrl        String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  ingredients     RecipeIngredient[]
  urls            RecipeUrl[]
  diaryEntries    DiaryEntry[]

  @@index([normalizedTitle])
  @@index([slug])
}

model RecipeUrl {
  id       String @id @default(cuid())
  url      String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  @@unique([recipeId, url])
  @@index([recipeId])
}

model RecipeIngredient {
  id        String   @id @default(cuid())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Float    // En gramos

  @@index([recipeId])
  @@index([productId])
}

model DiaryEntry {
  id            String    @id @default(cuid())
  date          DateTime
  userId        String?
  type          String // "PRODUCT" or "RECIPE"
  name          String
  quantity      Float
  calories      Float
  protein       Float
  fat           Float
  carbs         Float
  ingredients   Json?
  baseProduct   Product?  @relation(fields: [baseProductId], references: [id], onDelete: SetNull)
  baseProductId String?
  baseRecipe    Recipe?   @relation(fields: [baseRecipeId], references: [id], onDelete: SetNull)
  baseRecipeId  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([date])
}